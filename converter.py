import os
import argparse
import json
from   PIL import Image
from   PIL.PngImagePlugin import PngInfo

sampler_info = {
    'euler': {'name': 'Euler', 'type': 'Automatic'},
    'deis': {'name': 'DEIS', 'type': 'Automatic'},
    'ddim': {'name': 'DDIM', 'type': 'Automatic'},
    'ddpm': {'name': 'DDPM', 'type': 'Automatic'},
    'dpmpp_sde': {'name': 'DPM++ SDE', 'type': 'Automatic'},
    'dpmpp_2s': {'name': 'DPM++ 2S', 'type': 'Automatic'},
    'dpmpp_2m': {'name': 'DPM++ 2M', 'type': 'Automatic'},
    'dpmpp_2m_sde': {'name': 'DPM++ 2M SDE', 'type': 'Automatic'},
    'heun': {'name': 'Heun', 'type': 'Automatic'},
    'kdpm_2': {'name': 'KDPM 2', 'type': 'Automatic'},
    'lms': {'name': 'LMS', 'type': 'Automatic'},
    'pndm': {'name': 'PNDM', 'type': 'Automatic'},
    'unipc': {'name': 'UniPC', 'type': 'Automatic'},
    'euler_k': {'name': 'Euler', 'type': 'Karras'},
    'dpmpp_sde_k': {'name': 'DPM++ SDE', 'type': 'Karras'},
    'dpmpp_2s_k': {'name': 'DPM++ 2S', 'type': 'Karras'},
    'dpmpp_2m_k': {'name': 'DPM++ 2M', 'type': 'Karras'},
    'dpmpp_2m_sde_k': {'name': 'DPM++ 2M SDE', 'type': 'Karras'},
    'heun_k': {'name': 'Heun', 'type': 'Karras'},
    'lms_k': {'name': 'LMS Karras', 'type': 'Karras'},
    'euler_a': {'name': 'Euler a', 'type': 'Automatic'},
    'kdpm_2_a': {'name': 'KDPM 2a', 'type': 'Automatic'},
    'lcm': {'name': 'LCM', 'type': 'Automatic'},
    'tcd': {'name': 'TCD', 'type': 'Automatic'}
}

def main():
    parser = argparse.ArgumentParser(description="Convert InvokeAI generated images to Automatic1111 format, for easy upload to Civitai")
    parser.add_argument("filename", type=str, nargs='+', help="PNG file generated by InvokeAI")
    args = parser.parse_args()

    for filename in args.filename:
        # Load file and import metadata
        print(f"    Loading file: {filename}", flush=True)
        im_invoke = Image.open(filename)
        im_invoke.load()
        json_data = json.loads(im_invoke.info['invokeai_metadata'])

        print("    Processing conversion", flush=True)
        meta_positive = json_data['positive_prompt']
        meta_negative = '\nNegative prompt: ' + json_data['negative_prompt']
        meta_steps = '\nSteps: ' + str(json_data['steps'])
        meta_sampler = 'Sampler: ' + sampler_info[json_data['scheduler']]['name']
        meta_type = 'Schedule type: ' + sampler_info[json_data['scheduler']]['type']
        meta_cfg = 'CFG scale: ' + str(json_data['cfg_scale'])
        meta_seed = 'Seed: ' + str(json_data['seed'])
        meta_size = 'Size: ' + str(json_data['width']) + 'x' + str(json_data['height'])
        meta_mhash = 'Model hash: ' + json_data['model']['hash'].replace('sha256:','')[:10]
        meta_mname = 'Model: ' + json_data['model']['name']
        meta_params = [meta_steps, meta_sampler, meta_type, meta_cfg, meta_seed, meta_size, meta_mhash, meta_mname]
        if 'vae' in json_data.keys():
            meta_vhash = 'VAE hash: ' + json_data['vae']['hash'].replace('sha256:','')[:10]
            meta_vname = 'VAE: ' + json_data['vae']['name'] + '.safetensors'
            meta_params.append(meta_vhash)
            meta_params.append(meta_vname)
        if 'loras' in json_data.keys():
            meta_lora = 'Lora hashes: "'
            for idx, lora in enumerate(json_data['loras']):
                meta_lora += lora['model']['name'] + ': ' + lora['model']['hash'].replace('sha256:','')[:10]
                meta_positive += ' <lora:' + lora['model']['name'] + ':' + str(lora['weight']) + '>'
                if idx < len(json_data['loras']) - 1:
                    meta_lora += ', '
            meta_lora += '"'
            meta_params.append(meta_lora)
        meta_version = 'Version: v1.9.4' # Hard-code to imitate Automatic1111
        meta_params.append(meta_version)
        meta_final = meta_positive + meta_negative + ', '.join(meta_params)

        # Create a PngInfo object to hold the metadata
        metadata = PngInfo()
        metadata.add_text("parameters", meta_final)

        # Save the image with the metadata
        new_filename = os.path.join(os.path.dirname(filename), os.path.basename(filename).split('.')[0] + '_a1111.' + os.path.basename(filename).split('.')[1])
        im_invoke.save(new_filename, pnginfo=metadata)
        print(f"    Converted file saved as: {new_filename}", flush=True)
        print("Conversion complete.")

if __name__ == "__main__":
    main()